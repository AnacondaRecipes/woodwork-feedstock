{% set name = "woodwork" %}
{% set version = "0.25.1" %}

package:
  name: {{ name }}
  version: {{ version }}

source:
  url: https://pypi.io/packages/source/{{name[0]}}/{{name}}/{{name}}-{{version}}.tar.gz
  sha256: 73cb38e09229216cb7cbbaf2e4352b34d6e40ac44bf774c17e94a9047c7e98e3
  patches:                        # [win]
    - remove-absolute-path.patch  # [win]

build:
  entry_points:
    - woodwork = woodwork.__main__:cli
  number: 0
  skip: True  # [py<38]
  script: {{ PYTHON }} -m pip install . --no-deps --no-build-isolation -vv

requirements:
  build:                          # [win]
    - m2-patch                    # [win]
  host:
    - pip
    - python
    - setuptools >=61.0.0
    - wheel
  run:
    - importlib_resources >=5.10.0
    - numpy >=1.22.0,<1.25.0
    - pandas >=1.4.3
    - python
    - python-dateutil >=2.8.1
    - scikit-learn >=0.22
    - scipy >=1.10.0

test:
  imports:
    - woodwork
    - woodwork.tests
  requires:
    - pip
# Skip tests on s390x; missing moto and pyarrow
{% if not s390x %}
    - boto3 >=1.10.45
    - moto >=3.0.7
    - pyarrow >=4.0.1
    - pytest >=7.0.1
    - pytest-cov >=2.10.1
    - pytest-xdist >=2.1.0
    - smart_open >=5.0.0
  source_files:
    - woodwork/tests/*
{% endif %}
  commands:
    - pytest woodwork/tests  # [not (s390x or win)]
    # Hard coded paths cause a few tests to break on Windows.
    - pytest woodwork/tests --ignore "woodwork/tests/accessor/test_serialization.py" --ignore "woodwork/tests/utils/test_read_file.py"  # [win]
    # docker-py has an exact pinning for pywin32 that cause pip check to fail.
    - pip check  # [not win]

about:
  doc_url: https://woodwork.alteryx.com
  dev_url: https://github.com/alteryx/woodwork
  home: https://www.alteryx.com/open-source
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: Woodwork is a Python library that provides robust methods for managing and communicating data typing information.
  description: |
    Woodwork provides a common typing namespace for using your existing DataFrames in Featuretools,
    EvalML, and general ML. A Woodwork DataFrame stores the physical, logical, and semantic data
    types present in the data. In addition, it can store metadata about the data, allowing you to
    store specific information you might need for your application.

extra:
  recipe-maintainers:
    - machineAYX
    - simha104
    - petejanuszewski1
    - gsheni
    - thehomebrewnerd
    - rwedge
    - tamargrey
    - dvreed77
    - jeff-hernandez
    - Cmancuso
    - bchen1116
    - ParthivNaresh
